using Ergosfare.Contracts.Attributes;
using Ergosfare.Core.Abstractions;
using Ergosfare.Core.Abstractions.Registry;
using Ergosfare.Core.Abstractions.Registry.Descriptors;
using Ergosfare.Core.Abstractions.Strategies;
using Ergosfare.Core.Internal.Factories;
using Ergosfare.Core.Internal.Registry.Descriptors;
using Microsoft.Extensions.DependencyInjection;

namespace Ergosfare.Test.Fixtures;


/// <summary>
/// A test fixture for building <see cref="IHandlerDescriptor"/> instances with configurable
/// weight and groups. Supports creating main handler descriptors, as well as pre-, post-,
/// exception-, and final-interceptor descriptors.
/// </summary>
public class DescriptorFixture: IFixture<DescriptorFixture>
{
    private bool _disposed;
    private ushort _weight;
    private readonly List<string> _group = [GroupAttribute.DefaultGroupName];
    
    /// <summary>
    /// Gets or sets the message MessageRegistry used to provide a message registry
    /// for descriptor creation.
    /// </summary>
    public IMessageRegistry? MessageRegistry { get; private set; }
    
    /// <summary>
    /// Gets the current list of groups assigned to created descriptors.
    /// </summary>
    public IReadOnlyList<string> Group => _group.AsReadOnly();

    /// <summary>
    /// Sets the message dependency fixture to be used by this descriptor fixture.
    /// </summary>
    /// <param name="registry">The <see cref="MessageRegistry"/> instance to set.</param>
    /// <returns>The current <see cref="DescriptorFixture"/> instance to allow fluent configuration.</returns>
    public DescriptorFixture SetMessageRegistry(IMessageRegistry registry)
    {
        MessageRegistry = registry;
        return this;
    }

    /// <summary>
    /// Creates a message descriptor for the specified message type using the configured
    /// message registry from the <see cref="MessageDependencyFixture"/>.
    /// </summary>
    /// <param name="messageType">The type of the message for which to create a descriptor.</param>
    /// <returns>An <see cref="IMessageDescriptor"/> instance if a descriptor is found; otherwise, <c>null</c>.</returns>
    /// <exception cref="InvalidOperationException">
    /// Thrown if the <see cref="MessageDependencyFixture"/> has not been set before calling this method.
    /// </exception>
    public IMessageDescriptor? GetDescriptorFromRegistry(Type messageType)
    {
        var strategy =
            new ActualTypeOrFirstAssignableTypeMessageResolveStrategy(MessageRegistry!);

        return strategy.Find(messageType);
    }
      
    /// <summary>
    /// Adds one or more groups to the descriptor configuration.
    /// </summary>
    public DescriptorFixture AddGroups(params string[] groups)
    {
        _group.AddRange(groups);
        return this;
    }

    /// <summary>
    /// Removes one or more groups from the descriptor configuration.
    /// </summary>
    public DescriptorFixture RemoveGroups(params string[] groups)
    {
        _group.RemoveAll(groups.Contains);
        return this;
    }

     
    /// <summary>
    /// Clears all groups, with the option to restore the default group.
    /// </summary>
    /// <param name="resetWithDefault">If true, adds the default group after reset.</param>
    public DescriptorFixture ResetGroups(bool resetWithDefault = false)
    {
        _group.Clear();
        if (resetWithDefault) _group.Add(GroupAttribute.DefaultGroupName);
        return this;
    }
    
    
    /// <summary>
    /// Sets the weight value applied to created descriptors.
    /// </summary>
    public DescriptorFixture SetWeight(ushort weight)
    {
        _weight = weight;
        return this;
    }

    /// <summary>
    /// Resets the weight to <c>0</c>.
    /// </summary>
    public DescriptorFixture ResetWeight()
    {
        _weight = 0;
        return this;
    }

    
    /// <summary>
    /// Creates a new <see cref="IMessageDescriptor"/> for the specified message type.
    /// </summary>
    /// <typeparam name="TMessage">The message type to create a descriptor for.</typeparam>
    /// <returns>An <see cref="IMessageDescriptor"/> representing the specified message type.</returns>
    /// <example>
    /// <code>
    /// var descriptor = descriptorFixture.CreateMessageDescriptor&lt;MyMessage&gt;();
    /// Assert.Equal(typeof(MyMessage), descriptor.MessageType);
    /// </code>
    /// </example>
    public IMessageDescriptor CreateMessageDescriptor<TMessage>()
    {
        return new MessageDescriptor(typeof(TMessage));
    }

    /// <summary>
    /// Creates a <see cref="IHandlerDescriptor"/> instance for the specified handler type.
    /// </summary>
    /// <typeparam name="THandler">
    /// The type of the handler to create a descriptor for. Must implement <see cref="IHandlerDescriptor"/>
    /// and have a parameterless constructor.
    /// </typeparam>
    /// <returns>
    /// Returns the first <see cref="IHandlerDescriptor"/> generated by
    /// <see cref="HandlerDescriptorBuilderFactory.BuildDescriptors(Type)"/> for the specified handler type.
    /// </returns>
    /// <remarks>
    /// This method uses a temporary <see cref="HandlerDescriptorBuilderFactory"/> instance
    /// to build all descriptors for the given handler type and returns the first one.
    /// Useful for unit testing or quick descriptor generation without maintaining a persistent factory.
    /// </remarks>
    public IHandlerDescriptor CreateDescriptor<THandler>()
        where THandler :  new()
    {
        return new HandlerDescriptorBuilderFactory().BuildDescriptors(typeof(THandler)).First();
    }
    
    
    /// <summary>
    /// Creates a <see cref="MainHandlerDescriptor"/> for the specified handler and message types.
    /// </summary>
    public IHandlerDescriptor CreateMainDescriptor< TMessage, TResult, THandler>() 
        where TMessage : IMessage, new()
    {
        return new MainHandlerDescriptor
        {
            Weight = _weight,
            Groups = _group,
            HandlerType = typeof(THandler),
            MessageType = typeof(TMessage),
            ResultType = typeof(TResult),
        };
    }
    
    
    /// <summary>
    /// Creates a <see cref="PreInterceptorDescriptor"/> for the specified handler and message types.
    /// </summary>
    public IHandlerDescriptor CreatePreDescriptor<TMessage, THandler>() 
    {
        return new PreInterceptorDescriptor()
        {
            Weight = _weight,
            Groups = _group,
            HandlerType = typeof(THandler),
            MessageType = typeof(TMessage),
        };
    }

    /// <summary>
    /// Creates a <see cref="PostInterceptorDescriptor"/> for the specified handler, message, and result types.
    /// </summary>
    public IHandlerDescriptor CreatePostDescriptor< TMessage,TResult, THandler>() 
    {
        return new PostInterceptorDescriptor()
        {
            Weight = _weight,
            Groups = _group,
            HandlerType = typeof(THandler),
            MessageType = typeof(TMessage),
            ResultType = typeof(TResult),
        };
    }
    
    /// <summary>
    /// Creates an <see cref="ExceptionInterceptorDescriptor"/> for the specified handler, message, and result types.
    /// </summary>
    public IHandlerDescriptor CreateExceptionDescriptor<TMessage,TResult, THandler>() 
    {
        return new ExceptionInterceptorDescriptor()
        {
            Weight = _weight,
            Groups = _group,
            HandlerType = typeof(THandler),
            MessageType = typeof(TMessage),
            ResultType = typeof(TResult),
        };
    }
    
    /// <summary>
    /// Creates a <see cref="FinalInterceptorDescriptor"/> for the specified handler, message, and result types.
    /// </summary>
    public IHandlerDescriptor CreateFinalDescriptor<TMessage,TResult, THandler>() 
    {
        return new FinalInterceptorDescriptor()
        {
            Weight = _weight,
            Groups = _group,
            HandlerType = typeof(THandler),
            MessageType = typeof(TMessage),
            ResultType = typeof(TResult),
        };
    }

    /// <summary>
    /// Gets a fresh instance of this fixture.
    /// </summary>
    public DescriptorFixture New => new();
    
    /// <inheritdoc/>
    public DescriptorFixture AddServices(Action<IServiceCollection> configure) => this;
    
    
    /// <inheritdoc/>
    public ServiceProvider ServiceProvider { get; } = null!;

    /// <inheritdoc/>
    public void Dispose()
    {
        if (_disposed) return;
        MessageRegistry = null;
        _weight = 0;
        _group.Clear();
        _group.Add(GroupAttribute.DefaultGroupName);
        _disposed = true;
    }
}