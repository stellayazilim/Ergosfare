using Ergosfare.Test.Fixtures;

namespace Ergosfare.Core.Test.SignalHub;

/// <summary>
/// Unit tests for verifying <c>HubEvent</c> behavior,
/// including equality, hashing, related event management, 
/// and timestamp correctness.
/// </summary>
/// <remarks>
/// Equality between <c>HubEvent</c> instances is determined 
/// by all structural components of the event, including:
/// - Message type
/// - Handler count
/// - Event kind / metadata
/// 
/// <para>
/// The following components are ignored in equality comparisons:
/// - Timestamp
/// - RelatedEvents collection
/// </para>
/// 
/// Events generated by stubs with the same components (except timestamp and RelatedEvents)
/// are considered equal, even if they are different instances.
/// </remarks>
public class SignalTests(
    SignalFixture signalFixture) : BaseSignalFixture(signalFixture)
{
    

    [Fact]
    [Trait("Category", "Coverage")]
    public void Timestamp_ShouldBeCloseToUtcNow()
    {
        var signal = CreateSignal(1, "A");

        Assert.True((DateTime.UtcNow - signal.Timestamp).TotalSeconds < 1);
    }

    [Fact]
    [Trait("Category", "Coverage")]
    public void Add_ShouldAddSingleRelatedSignal()
    {
        var s1 = CreateSignal(1, "A");
        var s2 = CreateSignal(2, "B");

        s1.Add(s2);

        Assert.Single(s1.RelatedEvents);
        Assert.Same(s2, s1.RelatedEvents.First());
    }

    [Fact]
    [Trait("Category", "Coverage")]
    public void AddRange_ShouldAddMultipleRelatedSignals()
    {
        var s1 = CreateSignal(1, "A");
        var s2 = CreateSignal(2, "B");
        var s3 = CreateSignal(3, "C");

        s1.AddRange(new[] { s2, s3 });

        Assert.Equal(2, s1.RelatedEvents.Count);
        Assert.Contains(s2, s1.RelatedEvents);
        Assert.Contains(s3, s1.RelatedEvents);
    }

    [Fact]
    [Trait("Category", "Coverage")]
    public void Equals_ShouldReturnTrueForSameValues()
    {
        var s1 = CreateSignal(1, "A");
        var s2 = CreateSignal(1, "A");

        Assert.True(s1.Equals(s2));
        Assert.True(s1 == s2);
        Assert.False(s1 != s2);
    }

    [Fact]
    [Trait("Category", "Coverage")]
    public void Equals_ShouldReturnFalseForDifferentValues()
    {
        var s1 = CreateSignal(1, "A");
        var s2 = CreateSignal(2, "B");

        Assert.False(s1.Equals(s2));
        Assert.False(s1 == s2);
        Assert.True(s1 != s2);
    }

    [Fact]
    [Trait("Category", "Coverage")]
    public void Equals_ShouldReturnFalseForDifferentTypesOrNull()
    {
        var s1 = CreateSignal(1, "A");

        Assert.False(s1.Equals(null));
        Assert.False(s1.Equals("not a signal"));
    }

    [Fact]
    [Trait("Category", "Coverage")]
    public void GetHashCode_ShouldMatchForEqualSignals()
    {
        var s1 = CreateSignal(1, "A");
        var s2 = CreateSignal(1, "A");
        var s3 = CreateSignal(2, "B");

        Assert.Equal(s1.GetHashCode(), s2.GetHashCode());
        Assert.NotEqual(s1.GetHashCode(), s3.GetHashCode());
        
    }
}
